// @ts-nocheck
// This file generates a binary version of a langauge on the spot.
// Loads in approx. 35ms
// >> Make sure to trim the embed length - these can get *very* long. <<
// Disabled by default unless you want it
// Change `lang` constant to change which language is being converted.

const timestamp = Date.now();

const lang = "en-GB"; // !! Change me to change the langauge being translated !!
const langExports = require("./" + lang);

module.exports = convertObject(langExports);
module.exports.__TIME = Date.now() - timestamp;

console.log(module.exports.__TIME);

/**
 * Converts a function to returning base64
 * @param {Function} func The previous function
 * @returns {string} Binary String
 */
function convertFunc(func) {
	return (...args) => convertString(func(...args));
}

/**
 * Converts a string to binary
 * @param {string} str A string to convert to binary
 * @returns {string} Binary String
 */
function convertString(str) {
	str = String(str);
	let output = "";

	for (let i = 0; i < str.length; i++) {
		output += str.charCodeAt(i).toString(2) + " ";
	}

	return String(output);
}

/**
 * Converts an object containing strings and functions into returning binary
 * @param {object} obj An object to convert to binary
 */
function convertObject(obj) {
	let returnValue = {};
	Object.entries(obj).map(([key, value]) => {
		// Convert the contents
		let mapValue;
		switch (typeof value) {
			case "string":
			case "bigint":
			case "boolean":
			case "number":
				mapValue = [key, convertString(value)];
				break;
			case "function":
				mapValue = [key, convertFunc(value)];
				break;
			case "object":
				mapValue = [key, convertObject(value)];
				break;
			default:
				mapValue = [key, undefined];
				break;
		}
		return mapValue;
	}).forEach(([key, value]) => {
		// Back to object again
		returnValue[key] = value;
	});

	return returnValue;
}